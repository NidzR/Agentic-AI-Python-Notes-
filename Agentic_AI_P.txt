((IT Academy With Nida Rizwan Agentic AI Python Notes Basic to Advance))

Agentic Ai Python Quiz Basic / Advance & AI Levels

Python programming ka basic aur advanced level ka difference samajhna asaan hai, aur AI agentic ke baare mein bhi thoda explain karta hoon.

### 1. **Python Basic:**
Python ka basic level woh hota hai jahan aap language ki foundational cheezon ko seekhte hain, jaise:

- **Variables:** Yeh wo cheezen hain jinmein aap data store karte hain, jaise numbers, text, ya lists.
- **Data Types:** Python mein data types hote hain, jaise `int` (integers), `float` (decimal numbers), `str` (strings), aur `list` (ek sequence of items).
- **Control Structures:** Yeh wo cheezen hain jo aapke program ko control karte hain. Jaise `if-else` conditions, `for` aur `while` loops.
- **Functions:** Python mein aap functions bana sakte hain jo repeated tasks ko handle karte hain.
- **Input/Output:** Aap user se input le sakte hain aur output dikhane ke liye print statement use karte hain.

**Example:**
```python
name = input("Apna naam daalein: ")  # User input
print("Hello, " + name)  # Output
```

### 2. **Python Advanced:**
Advanced Python mein aap un features ko seekhte hain jo aapko complex projects banane mein madad dete hain. Yeh include karte hain:

- **Object-Oriented Programming (OOP):** Yeh ek programming paradigm hai jisme aap objects aur classes ke through code likhte hain. Jaise `class` aur `object`.
- **Libraries/Modules:** Advanced Python mein aap libraries (jaise `pandas`, `numpy`, `matplotlib`) ka use karte hain jo aapko specific tasks (jaise data analysis, graph plotting, etc.) mein madad deti hain.
- **File Handling:** Aap files ko read/write karte hain, jaise `.txt`, `.csv`, ya `.json`.
- **Exception Handling:** Errors ko handle karne ke liye `try-except` blocks use karte hain.
- **Generators & Decorators:** Yeh advanced concepts hain jo code ko efficient aur reusable banate hain.

**Example:**
```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        return f"Hello, my name is {self.name} and I am {self.age} years old."

p1 = Person("Ali", 25)
print(p1.greet())  # Output: Hello, my name is Ali and I am 25 years old.
```

### 3. **AI Agentic:**
AI agentic ka matlab hai "Artificial Intelligence agents." Yeh wo systems hote hain jo apne environment mein actions perform karte hain aur apne goals achieve karte hain.

- **AI Agent:** Ek AI agent ek program hota hai jo apne surroundings se information leta hai, usse process karta hai, aur fir decisions leta hai. Yeh agent environment se interact karte hain, learn karte hain, aur problem solve karte hain.
  
- **Types of AI Agents:**
  - **Reactive Agents:** Yeh agents bas present situation ke basis par decision lete hain. Jaise koi robot jo sirf sensor data ke through react karta hai.
  - **Deliberative Agents:** Yeh agents apne actions ka plan karte hain aur different possibilities ko evaluate karte hain pehle se.
  - **Learning Agents:** Yeh agents apne experience se seekhte hain aur apne decisions ko improve karte hain over time (jaise reinforcement learning).

**Example:** Ek chatbot ko agar aap AI agent bana rahe hain, to yeh user ke questions ko samajhne ki koshish karega, fir uske response ke basis par apni next action decide karega.

**Summary in Roman Urdu:**
- **Python Basic** mein aap syntax, data types, aur basic programming concepts seekhte hain.
- **Python Advanced** mein aap object-oriented programming, libraries, aur complex tasks ko handle karte hain.
- **AI Agentic** yaani AI agents woh systems hote hain jo environment se interact karke apne goals achieve karte hain. 

BASIC K DEPTH & DETAILS CONCEPTS 

shuru karte hain basic Python ke core concepts

### 1. **Variables & Data Types:**
Python mein variables wo containers hote hain jisme aap data store karte hain.

- **Variable Declaration:** Aap variables ko is tarah declare karte hain:
  ```python
  x = 10  # integer
  y = "Hello, World!"  # string
  ```
- **Data Types:**
  - **int (integer):** Yeh numbers hote hain jo decimal ke bina hote hain. Example: `10, -3, 100`
  - **float (floating-point):** Yeh decimal numbers hote hain. Example: `3.14, -0.1, 2.0`
  - **str (string):** Yeh text hota hai, jo quotes ke andar likha jata hai. Example: `"Hello", "123"`
  - **bool (boolean):** Yeh True ya False value ko represent karta hai. Example: `True, False`
  - **list:** Yeh ordered collection of items hota hai. Example: `[1, 2, 3, 'apple']`
  - **tuple:** Yeh bhi ordered collection hai, lekin immutable hota hai. Example: `(1, 2, 3)`
  - **dict (dictionary):** Yeh key-value pairs ka collection hota hai. Example: `{"name": "Ali", "age": 25}`
  - **set:** Yeh unordered unique elements ka collection hota hai. Example: `{1, 2, 3}`

### 2. **Operators:**
Python mein operators unkaam aati hain jisse aap variables ke saath calculations ya operations kar sakte hain.

- **Arithmetic Operators:** Jaise `+`, `-`, `*`, `/`, `//` (integer division), `%` (modulus), `**` (exponentiation)
  ```python
  a = 10
  b = 5
  print(a + b)  # Addition
  print(a - b)  # Subtraction
  print(a * b)  # Multiplication
  print(a / b)  # Division
  print(a % b)  # Modulus
  ```
  
- **Comparison Operators:** Yeh operators two values ko compare karte hain. Jaise `==`, `!=`, `>`, `<`, `>=`, `<=`
  ```python
  x = 10
  y = 5
  print(x == y)  # False
  print(x != y)  # True
  print(x > y)   # True
  ```

- **Logical Operators:** Yeh operators conditions ko combine karte hain. Jaise `and`, `or`, `not`
  ```python
  a = True
  b = False
  print(a and b)  # False
  print(a or b)   # True
  print(not a)    # False
  ```

### 3. **Control Flow Statements:**
Control flow statements aapko apne code ko condition ke basis par control karne mein madad deti hain.

- **if-else statement:** Yeh condition ke basis par decision leta hai.
  ```python
  age = 20
  if age >= 18:
      print("Adult")
  else:
      print("Not an adult")
  ```
  
- **elif (else if):** Multiple conditions ko check karne ke liye.
  ```python
  age = 15
  if age >= 18:
      print("Adult")
  elif age >= 13:
      print("Teenager")
  else:
      print("Child")
  ```

- **for loop:** Yeh loop sequence ke elements ko iterate karta hai.
  ```python
  for i in range(5):  # 0 to 4
      print(i)
  ```

- **while loop:** Yeh loop tab tak chalti hai jab tak condition True hoti hai.
  ```python
  i = 0
  while i < 5:
      print(i)
      i += 1
  ```

### 4. **Functions:**
Functions woh blocks of code hote hain jo aap repeatedly call karte hain.

- **Defining a function:** Aap function ko `def` keyword se define karte hain.
  ```python
  def greet(name):
      print(f"Hello, {name}!")
  
  greet("Ali")  # Calling the function
  ```

- **Return Statement:** Function se value return karne ke liye `return` keyword use hota hai.
  ```python
  def add(a, b):
      return a + b
  
  result = add(3, 5)
  print(result)  # Output: 8
  ```

### 5. **Lists:**
List ek ordered collection hota hai jisme aap different types ke items store kar sakte hain.

- **List Creation & Access:**
  ```python
  fruits = ["apple", "banana", "cherry"]
  print(fruits[0])  # Accessing the first item ('apple')
  ```

- **List Methods:** Jaise `append()`, `remove()`, `pop()`, `len()`, etc.
  ```python
  fruits.append("orange")  # Adding an item
  print(fruits)  # Output: ['apple', 'banana', 'cherry', 'orange']
  ```

### 6. **Dictionaries:**
Dictionary key-value pairs ka collection hota hai.

- **Dictionary Creation & Access:**
  ```python
  person = {"name": "Ali", "age": 25}
  print(person["name"])  # Output: Ali
  ```

- **Dictionary Methods:** Jaise `get()`, `keys()`, `values()`, `update()`, etc.
  ```python
  print(person.keys())  # Output: dict_keys(['name', 'age'])
  ```

### 7. **Loops & Iteration:**
- **List Iteration (for loop):**
  ```python
  fruits = ["apple", "banana", "cherry"]
  for fruit in fruits:
      print(fruit)  # Output: apple, banana, cherry
  ```

### 8. **Error Handling (Exception Handling):**
Agar koi error occur hoti hai to usse handle karne ke liye `try-except` block use hota hai.

```python
try:
    x = 10 / 0  # Division by zero error
except ZeroDivisionError:
    print("Cannot divide by zero")
```

### Summary:
Yeh kuch basic concepts the jo aapko Python mein seekhne chahiye:
- Variables & Data Types
- Operators
- Control Flow Statements (if-else, loops)
- Functions
- Lists & Dictionaries
- Error Handling

ADVANCE DEPTH & DETAILS 

Ab aapke Python ke **advanced topics** ke baare mein discuss karte hain. Yeh concepts aapko complex aur real-world applications mein madad denge. 

### 1. **Object-Oriented Programming (OOP):**
Python mein Object-Oriented Programming (OOP) ek aisa paradigm hai jisme aap apne program ko objects aur classes ke through organize karte hain. Iska major benefit reusability aur modularity hota hai.

- **Class:** Class ek blueprint hoti hai jisme variables aur methods define kiye jaate hain.
- **Object:** Object class ka ek instance hota hai, jo real-world entity ko represent karta hai.

**Basic Concepts:**
- **Constructor (`__init__` method):** Object create karte waqt automatic call hota hai.
- **Instance Variables:** Yeh variables object-specific hote hain.
- **Methods:** Yeh functions hoti hain jo class ke andar define hoti hain aur objects ke saath operate karti hain.

**Example:**
```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")

# Object Creation
p1 = Person("Ali", 25)
p1.greet()  # Output: Hello, my name is Ali and I am 25 years old.
```

- **Inheritance:** Ek class dusri class ki properties inherit kar sakti hai.
- **Polymorphism:** Ek method ya operator ka multiple behaviors ho sakte hain.
- **Encapsulation:** Internal state ko hide karna aur public methods ke through access dena.
- **Abstraction:** Complex details ko hide karke simple interface provide karna.

### 2. **Modules and Packages:**
- **Modules:** Python mein code reuse karne ke liye aap modules banate hain. Har Python file ek module hoti hai.
  ```python
  import math
  print(math.sqrt(16))  # Output: 4.0
  ```

- **Packages:** Packages modules ka collection hota hai. Example: `numpy`, `pandas`.

- **Creating a Module:**
  Agar aap apna module banana chahte hain:
  - Python file ko `my_module.py` naam se save karen.
  - Use `import my_module` se import karen.

### 3. **File Handling:**
Python mein file operations kaafi simple hote hain. Aap files ko open, read, write, aur close kar sakte hain.

- **Opening a file:**
  ```python
  file = open("data.txt", "w")  # 'w' means write mode
  file.write("Hello, this is a test.")
  file.close()
  ```

- **Reading from a file:**
  ```python
  file = open("data.txt", "r")  # 'r' means read mode
  content = file.read()
  print(content)
  file.close()
  ```

- **Context Manager (with statement):** File ko automatically close karne ke liye.
  ```python
  with open("data.txt", "r") as file:
      content = file.read()
      print(content)
  ```

### 4. **Exception Handling (Advanced):**
- **Multiple Exceptions:**
  Aap multiple exceptions ko handle karne ke liye multiple `except` blocks ka use karte hain.
  ```python
  try:
      x = 10 / 0
  except ZeroDivisionError:
      print("Cannot divide by zero")
  except Exception as e:
      print(f"An error occurred: {e}")
  ```

- **Custom Exceptions:**
  Aap apne custom exceptions bhi define kar sakte hain:
  ```python
  class CustomError(Exception):
      pass

  try:
      raise CustomError("This is a custom error.")
  except CustomError as e:
      print(e)
  ```

### 5. **Lambda Functions:**
Lambda functions, jo anonymous functions bhi kehlate hain, simple functions hotay hain jo ek line mein likhe jaate hain.

```python
add = lambda x, y: x + y
print(add(3, 4))  # Output: 7
```

- **Use Case:** Lambda functions ka use often `map()`, `filter()`, aur `reduce()` ke saath hota hai.

### 6. **Map, Filter, Reduce:**
- **map():** Aap function ko list ke har item par apply karne ke liye `map()` use karte hain.
  ```python
  numbers = [1, 2, 3, 4]
  result = map(lambda x: x * 2, numbers)
  print(list(result))  # Output: [2, 4, 6, 8]
  ```

- **filter():** Aap conditions ke basis par elements ko filter karne ke liye `filter()` use karte hain.
  ```python
  numbers = [1, 2, 3, 4]
  result = filter(lambda x: x % 2 == 0, numbers)
  print(list(result))  # Output: [2, 4]
  ```

- **reduce():** Yeh function `functools` module mein hota hai aur cumulative function apply karta hai.
  ```python
  from functools import reduce
  numbers = [1, 2, 3, 4]
  result = reduce(lambda x, y: x + y, numbers)
  print(result)  # Output: 10
  ```

### 7. **Generators:**
Generators Python mein special type of functions hote hain jo lazy evaluation ka use karte hain, yani values ko ek ek karke return karte hain jab zarurat ho.

- **Yield Keyword:**
  ```python
  def count_up_to(limit):
      count = 1
      while count <= limit:
          yield count
          count += 1

  for number in count_up_to(5):
      print(number)  # Output: 1 2 3 4 5
  ```

- **Benefits:** Generators memory efficient hote hain kyunki yeh ek waqt mein sirf ek item memory mein rakhtay hain.

### 8. **Decorators:**
Decorators functions ko modify karte hain bina unhein explicitly change kiye.

- **Function Decorator:**
  ```python
  def decorator_function(func):
      def wrapper():
          print("Before function call")
          func()
          print("After function call")
      return wrapper

  @decorator_function
  def say_hello():
      print("Hello!")
  
  say_hello()
  ```

### 9. **Comprehensions:**
List, dictionary, aur set comprehensions ka use karte hue aap concise aur readable code likh sakte hain.

- **List Comprehension:**
  ```python
  numbers = [1, 2, 3, 4]
  squares = [x**2 for x in numbers]
  print(squares)  # Output: [1, 4, 9, 16]
  ```

- **Dictionary Comprehension:**
  ```python
  keys = ["a", "b", "c"]
  values = [1, 2, 3]
  dict_comp = {k: v for k, v in zip(keys, values)}
  print(dict_comp)  # Output: {'a': 1, 'b': 2, 'c': 3}
  ```

### 10. **Multithreading & Multiprocessing:**
- **Multithreading:** Aap ek hi program mein multiple threads run karte hain taake time-consuming tasks ko parallel execute kiya ja sake.
  ```python
  import threading

  def print_hello():
      print("Hello from thread!")

  thread = threading.Thread(target=print_hello)
  thread.start()
  ```

- **Multiprocessing:** Yeh process ko parallel run karne ke liye use hota hai, jisme CPU-bound tasks efficiently execute hote hain.

### 11. **Regular Expressions (Regex):**
Regular expressions ka use pattern matching ke liye hota hai, jaise text search aur text manipulation.

```python
import re
pattern = r"\d+"  # Matches one or more digits
text = "There are 123 apples"
matches = re.findall(pattern, text)
print(matches)  # Output: ['123']
```

### 12. **Async Programming (Asyncio):**
Asynchronous programming mein aap tasks ko non-blocking tarike se perform karte hain, jisse efficiency badhti hai, especially I/O-bound tasks mein.

```python
import asyncio

async def greet():
    print("Hello")
    await asyncio.sleep(1)
    print("World")

# Running async code
asyncio.run(greet())
```

### Summary:
- **OOP** (Classes, Inheritance, Polymorphism)
- **Modules & Packages** (Code reuse and organization)
- **File Handling** (Reading, Writing, Context Managers)
- **Advanced Exception Handling** (Multiple & Custom exceptions)
- **Lambda Functions** (Anonymous functions)
- **Functional Programming** (Map, Filter, Reduce)
- **Generators** (Lazy Evaluation)
- **Decorators** (Function wrappers)
- **Comprehensions** (List, Dict, Set comprehensions)
- **Multithreading & Multiprocessing**
- **Regular Expressions (Regex)**
- **Async Programming (Asyncio)**

AI PYTHON DEPTH & DETAILS

AI agentic ke concepts kaafi interesting aur important hote hain jab aap AI aur autonomous systems ko samajhna chahte hain. **Agentic AI** ka matlab hota hai woh AI systems jo apne environment se interact karte hain, apne goals achieve karte hain, aur apni actions ko plan aur execute karte hain. Yahan main AI agents ke related tamam concepts ko explain karunga:

### 1. **What is an AI Agent?**
AI Agent ek system hota hai jo **perceives** (environment se data leta hai), **decides** (action choose karta hai), aur **acts** (apna action perform karta hai) apne goals ko achieve karne ke liye.

**Key Components of an AI Agent:**
- **Perception:** AI agent ko apne environment se data milta hai. Yeh data sensors ke through aata hai (jaise images, sounds, inputs, etc.).
- **Reasoning:** Yeh stage mein agent data ko process karta hai aur decisions lene ke liye reasoning algorithms use karta hai.
- **Action:** Agent apne goal ko achieve karne ke liye koi action leta hai. Yeh action physical (robot movements) ya virtual (software commands) ho sakta hai.

**Example:**
- Aap ek AI agent ko ek robot ke roop mein soch sakte hain jo ek room mein chal raha hai aur apne environment ko samajh kar obstacles se bachne ke liye decisions leta hai.

### 2. **Types of AI Agents:**
AI agents ko typically 4 major types mein classify kiya jaata hai:

#### a. **Simple Reflex Agent:**
- **Definition:** Yeh agents sirf current situation ke basis par decisions lete hain, bina past experiences ko consider kiye. 
- **Working:** Yeh agents predefined rules ka follow karte hain (like an if-else rule). 
- **Example:** Ek thermostat jo room temperature ko measure karta hai aur agar temperature zyada ho to AC ko on kar leta hai.

#### b. **Model-Based Reflex Agent:**
- **Definition:** Yeh agents apne environment ka ek model maintain karte hain. Yeh agent apne past actions aur environment ke changes ko record karte hain.
- **Working:** Yeh agent current situation ke saath-sath past experiences ko bhi consider karte hain, isliye thoda zyada intelligent hota hai.
- **Example:** Ek robot jo ek room mein chal raha hai, woh apne past movements ko track karta hai taake future mein better decisions le sake.

#### c. **Goal-Based Agent:**
- **Definition:** Goal-based agents apne goal ko achieve karne ke liye planning aur reasoning karte hain.
- **Working:** Yeh agents apne environment se data lete hain aur apni goals ko achieve karne ke liye multiple possible actions evaluate karte hain.
- **Example:** Ek chess-playing AI agent jo apne moves ko plan karta hai taake opponent ke king ko checkmate kar sake.

#### d. **Utility-Based Agent:**
- **Definition:** Yeh agents not only goals achieve karte hain, but unhe achieve karte waqt apni satisfaction ya utility ko maximize karte hain.
- **Working:** Yeh agents actions ko evaluate karte hain based on how much utility or satisfaction wo action unke goal ko achieve karne mein contribute karega.
- **Example:** Ek self-driving car jo apne speed, fuel consumption, aur time ko optimize karte hue travel karne ka decision leti hai.

#### e. **Learning Agent:**
- **Definition:** Learning agents apne environment se seekhne ki koshish karte hain aur apne decisions ko continuously improve karte hain.
- **Working:** Yeh agents feedback se learn karte hain (jaise reinforcement learning) aur apne actions ko adapt karte hain.
- **Example:** Aap ek AI agent ko train karte hain jo video games khelta hai. Woh game ke rules ko seekhne ke baad apne strategies ko improve karta hai.

### 3. **Components of an AI Agent:**
Har AI agent ke paas kuch essential components hote hain jo uske functioning ko control karte hain.

#### a. **Sensors (Perception):**
Sensors AI agent ko apne environment se information gather karne mein madad karte hain. Yeh input sensors ki tarah kaam karte hain jo environment ki state ko measure karte hain.

**Example:** 
- **Camera sensor** for visual perception.
- **Microphone sensor** for sound perception.
- **Temperature sensor** for sensing environmental temperature.

#### b. **Actuators (Action):**
Actuators wo components hain jo AI agent ko apne actions perform karne mein madad karte hain. Jaise motor, display, etc.

**Example:** 
- Ek robot jo move karne ke liye motors ka use karta hai.
- Ek chatbot jo user ke message ka response dikhane ke liye screen par text display karta hai.

#### c. **Agent Function:**
Agent function woh function hota hai jo agent ki behavior ko define karta hai. Yeh function environment ki state ke hisaab se action decide karta hai.

**Example:** Ek agent function jo robot ko yeh decide karne mein help karta hai ki wo forward move kare ya left/right turn kare based on its current environment.

### 4. **Agent Environment:**
Agent ka environment woh space hota hai jisme wo operate karta hai. Environment ko samajhna AI agent ki performance ke liye bohot zaroori hai.

- **Fully Observable vs Partially Observable:**
  - **Fully Observable:** Jab agent ko apne environment ke baare mein complete information milti hai.
  - **Partially Observable:** Jab agent ko apne environment ke baare mein incomplete ya noisy data milta hai.
  
**Example:** A chess game environment (fully observable) vs a real-world traffic system (partially observable).

- **Static vs Dynamic:** 
  - **Static Environment:** Jab environment time ke saath change nahi hota.
  - **Dynamic Environment:** Jab environment time ke saath constantly change hota hai.
  
**Example:** A computer game environment (static) vs real-time weather systems (dynamic).

### 5. **Autonomous Agents:**
Autonomous agents woh agents hote hain jo bina human intervention ke apne goals ko achieve karne ke liye independent decisions lete hain.

- **Example:** Self-driving cars, jo apne environment ko perceive karte hain, decisions lete hain (speed control, stopping, turning) bina kisi external interference ke.

### 6. **Learning in AI Agents:**
- **Reinforcement Learning (RL):** AI agent ko environment ke saath interact karte hue rewards ya punishments milte hain, jisse wo apne future actions ko optimize karta hai. Yeh learning ek trial-and-error process hoti hai.
  
  **Example:** Aap ek robot ko reinforce karte hain jab wo right direction mein move kare aur penalize karte hain jab wo galat direction mein move kare.

- **Supervised Learning:** Ismein AI agent ko labeled data di jaati hai taake wo patterns identify kar sake aur future mein un patterns ke basis par decisions le sake.
  
  **Example:** Aap ek AI agent ko email classify karne ke liye train karte hain, jisme labeled data hoti hai (spam aur non-spam emails).

- **Unsupervised Learning:** Ismein AI agent ko data ke saath label nahi diya jaata. Agent ko khud patterns aur structures identify karni hoti hain.

  **Example:** Clustering algorithms jo data ko groups mein divide karte hain bina labels ke.

### 7. **Ethical and Responsible AI:**
AI agents ko ethical aur responsible tareeqe se design karna bohot zaroori hota hai, taake wo human welfare ke liye kaam karein.

- **Bias in AI:** AI systems ko bias se bachana zaroori hai, taki wo unfair decisions na lein.
- **Accountability:** Agar AI agent galat decision leta hai, to kisne us decision ko approve kiya ya control kiya, iski accountability honi chahiye.

### 8. **Applications of Agentic AI:**
- **Robotics:** AI agents jo robots ko autonomous banate hain.
- **Natural Language Processing (NLP):** Chatbots aur virtual assistants jaise Siri aur Alexa, jo human-like interactions ke liye AI agents ka use karte hain.
- **Autonomous Vehicles:** Self-driving cars jo apne environment ko samajh kar drive karte hain.
- **Game Playing Agents:** Chess, Go, aur other games ke liye AI agents jo human-level performance achieve karte hain.
- **Recommendation Systems:** AI agents jo user preferences ko samajh kar personalized recommendations dete hain.

### Summary of AI Agentic Concepts:
- **AI Agent:** A system that perceives, decides, and acts to achieve goals.
- **Types of Agents:** Simple Reflex, Model-Based Reflex, Goal-Based, Utility-Based, Learning Agents.
- **Components:** Sensors (Perception), Actuators (Action), Agent Function.
- **Learning Types:** Reinforcement, Supervised, Unsupervised.
- **Applications:** Robotics, NLP, Autonomous Vehicles, Game Playing, etc.


QUIZ BASE DETAILS:

Yeh DETAILS  **conceptual understanding**, **code analysis and debugging**, **practical application**, aur **code output prediction** pe based hain, to yeh aapke liye kuch aise MCQs ka design bana sakta hoon jo har ek category ko cover karein. In MCQs mein conceptual knowledge, coding skills, and practical scenarios ki understanding test ki jaayegi.

Main ab aapko kuch example questions dunga aur phir aapko batata hoon ki kaise unhe design kiya jaata hai.

### 1. **Conceptual Understanding:**
Conceptual understanding ka matlab hai aapko AI, Python, ya kisi bhi technical concept ke baare mein clear knowledge hona chahiye.

**Example 1:**
Q. **What is the purpose of using the `yield` keyword in Python?**
- A) To define a regular function
- B) To return a value from a function
- C) To define a generator function
- D) To stop the function execution

**Correct Answer:** C) To define a generator function

**Explanation:** 
- `yield` keyword ka use Python mein generator function banane ke liye hota hai. Jab `yield` kisi function ke andar hota hai, to function ko generator banaya jaata hai, jo memory efficient hota hai aur values ko lazily generate karta hai.

---

**Example 2:**
Q. **In object-oriented programming, what does inheritance allow?**
- A) It allows an object to be created from a class.
- B) It allows one class to inherit the properties and methods of another class.
- C) It prevents methods from being overridden.
- D) It allows an object to inherit the properties of other objects.

**Correct Answer:** B) It allows one class to inherit the properties and methods of another class.

**Explanation:** 
- Inheritance ek OOP principle hai jisme ek class doosri class ki properties (variables) aur methods ko inherit karti hai, jisse code reusability badhti hai.

---

### 2. **Code Analysis and Debugging:**
Yeh questions Python code ko analyze karte hain, aur agar koi bug ho to usse identify karte hain.

**Example 3:**
Q. **What will be the output of the following Python code?**
```python
def test():
    x = 10
    if x > 5:
        x = x + 5
    else:
        x = x - 5
    return x

print(test())
```
- A) 5
- B) 10
- C) 15
- D) 0

**Correct Answer:** C) 15

**Explanation:**
- `x = 10` hai aur if condition ke through, `x > 5` true hai, isliye `x = x + 5` hota hai, jo result 15 deta hai.

---

**Example 4:**
Q. **What is the error in the following code?**
```python
def calculate_area(radius):
    return 3.14 * radius * radius

radius = input("Enter radius: ")
area = calculate_area(radius)
print("Area:", area)
```
- A) Syntax Error
- B) TypeError
- C) ValueError
- D) No error

**Correct Answer:** B) TypeError

**Explanation:**
- `input()` function string return karta hai. Jab aap `calculate_area(radius)` mein `radius` ko multiply karte hain, toh string ko integer se multiply karne ki koshish hoti hai, jo `TypeError` generate karega. Isko fix karne ke liye `radius = int(input())` likhna hoga.

---

### 3. **Practical Application:**
Practical application ka matlab hai aise questions jo real-world scenarios ko consider karte hain aur aapko unmein solution implement karne ke liye kahan se shuru karna hai, yeh batate hain.

**Example 5:**
Q. **Which Python library would you use for handling large datasets in tabular form, performing complex queries, and creating data visualizations?**
- A) NumPy
- B) Pandas
- C) Matplotlib
- D) TensorFlow

**Correct Answer:** B) Pandas

**Explanation:**
- Pandas ek powerful library hai jo tabular data ko handle karne ke liye use hoti hai. Yeh data manipulation aur analysis ke liye behtareen tools provide karta hai.

---

**Example 6:**
Q. **In the context of machine learning, if you want to predict the probability of a class label given an input, which algorithm would you most likely use?**
- A) Linear Regression
- B) Logistic Regression
- C) Decision Tree
- D) K-Means Clustering

**Correct Answer:** B) Logistic Regression

**Explanation:**
- Logistic regression probability-based classification algorithm hai jo binary classification tasks mein kaafi useful hota hai.

---

### 4. **Code Output Prediction:**
Code output prediction ke questions mein aapko ek given code ka output predict karna hota hai. Yeh questions aapki problem-solving aur debugging skills ko test karte hain.

**Example 7:**
Q. **What will be the output of the following Python code?**
```python
x = [1, 2, 3]
y = x
y[0] = 10
print(x)
```
- A) [1, 2, 3]
- B) [10, 2, 3]
- C) [1, 2, 10]
- D) [10, 2, 3]

**Correct Answer:** D) [10, 2, 3]

**Explanation:**
- Jab `y = x` hota hai, to `y` aur `x` ek hi memory location ko refer karte hain. Toh jab `y[0] = 10` hota hai, to `x` bhi modify ho jaata hai.

---

**Example 8:**
Q. **What will be the output of the following code?**
```python
def add_numbers(a, b):
    return a + b

print(add_numbers("5", 3))
```
- A) 8
- B) 53
- C) Error: TypeError
- D) 5 + 3

**Correct Answer:** C) Error: TypeError

**Explanation:**
- `"5"` ek string hai aur `3` ek integer. In dono ko add karte waqt `TypeError` aata hai kyunki Python string aur integer ko directly add nahi kar sakta. 

---

### Additional Ideas for MCQs:

- **For Conceptual Understanding:**  
  Questions jo fundamental concepts, algorithms, or paradigms ko samajhne ki testing karte hain.  
  Example: "What is the difference between a list and a tuple in Python?" "What is the time complexity of binary search?"

- **For Code Analysis and Debugging:**  
  Code snippets jo aapko diya jaata hai aur aapko usmein koi error ya bug find karna hota hai.  
  Example: "What is the bug in the following code?"  
  Example: "What does this function do?"

- **For Practical Applications:**  
  Real-world scenarios jo aapko kisi tool ya technique ko apply karne ke liye kehte hain.  
  Example: "Which Python library would you use to perform data analysis and generate visualizations for large datasets?"

- **For Code Output Prediction:**  
  Code snippets diye jaate hain aur aapko output predict karna hota hai.  
  Example: "What will be the output of the following code?"  
  Example: "What is the result of this list comprehension?"

---

### Conclusion:
Yeh 80 MCQs ka combination aapke test ke liye design ho sakta hai. Har category ko conceptual understanding, code analysis, practical applications aur code output prediction mein divide kiya gaya hai. Har question ka purpose hai aapko practical coding aur theory concepts ko integrate karne mein madad karna

(Ab hum janaingay har sawal ki details ko k is sawal ka matlab kia hay aur kis hawalay say hay aur is ko humay kis tarha solve karna chahye:

### Q1. **What is the purpose of using the `yield` keyword in Python?**

#### Sawal Ka Matlab:
Is sawal ka matlab hai, aap se yeh pucha jaa raha hai ke Python mein `yield` keyword ka kya purpose hota hai. Jab aap Python mein koi function likhte hain jo data return karta hai, to aap usually `return` keyword ka use karte hain. Lekin agar aapko function se data ek-ek karke, lazily (step by step) chahiye ho, to aap `yield` ka use karte hain. 

`yield` ek special keyword hai jo **generator function** ko define karta hai. Matlab, agar aap koi function likhte hain aur usmein `yield` ka use karte hain, to wo function **generator** ban jaata hai. Generator function koi value **lazily** return karta hai, yani jab tak aap us value ki request nahi karte, tab tak wo value generate nahi hoti. 

#### **Answer Explanation:**

The correct answer is: **C) To define a generator function**

- Jab aap Python mein koi function likhte hain aur usmein `yield` use karte hain, to wo function **generator** ban jaata hai. Yeh ek special type ka function hota hai jo ek time par ek value **return** karta hai, aur jab aap us value ki request karte hain, tab wo next value generate kar leta hai. 

- Agar aap **normal function** (with `return`) ka use karenge, to function **poora data ek saath return karega**, lekin **generator function** (`yield` ke saath) **step by step data return karega**. Iska fayda yeh hai ke agar aap large datasets handle kar rahe hain, to memory ka consumption kaafi kam hota hai, kyunke generator function sirf ek value ko memory mein rakhta hai, puri list ko nahi.

#### **Where and How is `yield` Used?**
- **Memory Efficiency:** Jab aapko bohot bada dataset handle karna ho, jaise bohot saare records ya large data files (example: logs, large CSV files) jo aap sequentially process karna chahte hain, to `yield` ka use hota hai, kyunke isse puri list ya collection ko memory mein load nahi karna padta. Har baar ek item process hota hai aur usse output generate hota hai.
  
- **Example 1:** Suppose aap ek function likhna chahte hain jo Fibonacci sequence ko generate karein, aur aapko saari values ek saath yaad rakhne ki zarurat nahi hai. Aap `yield` ka use karte hain taki har baar ek value generate ho aur aap usse ek time pe handle kar sakein.

**Code Example:**
```python
def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        yield a  # Each time the next Fibonacci number is yielded
        a, b = b, a + b

# Using the generator
fib = fibonacci(5)
for number in fib:
    print(number)
```

**Explanation:**
- Yeh function `fibonacci` ek generator function hai, jo har call pe ek Fibonacci number **lazily** return karta hai jab tak hum `for loop` ke through usse next value nahi lete. Jab tak aap `fib` ko iterate karenge, tab tak `yield` next value dega.

**Output:**
```
0
1
1
2
3
```

- **Advantages of `yield`:**
  1. **Memory Efficient:** Agar aapko ek bohot lambi list ki values chahiyein (like Fibonacci numbers), to `yield` se aap har value ko ek-ek karke generate kar sakte hain bina sari values ko ek time par memory mein store kiye.
  2. **Lazy Evaluation:** `yield` lazy evaluation provide karta hai. Matlab, function sirf tab execute hota hai jab usse call kiya jaata hai, aur aapko ek time par ek hi value chahiye hoti hai.

#### **Key Differences Between `yield` and `return`:**

- **Return:** `return` ka use function mein jab hota hai, to function execution wahan pe band ho jaata hai, aur function complete ho jaata hai. Ek hi baar return hota hai, aur saari values ek saath return ho jaati hain. 

- **Yield:** Jab `yield` ka use hota hai, function execution temporary suspend hota hai aur jab next value ki zarurat padti hai, tab function continue hota hai.

#### **Example 2:**
Agar aap ek generator function bana rahe hain jo numbers ko process karta hai aur unhe ek-ek karke return karta hai:

```python
def process_numbers(numbers):
    for number in numbers:
        if number % 2 == 0:
            yield number  # Only even numbers are yielded
        else:
            print(f"Odd number encountered: {number}")

nums = [1, 2, 3, 4, 5, 6]
gen = process_numbers(nums)
for num in gen:
    print(f"Even number: {num}")
```

**Output:**
```
Odd number encountered: 1
Even number: 2
Odd number encountered: 3
Even number: 4
Odd number encountered: 5
Even number: 6
```

- Is example mein, function har even number ko **yield** karta hai, aur jab tak usko request nahi ki jaati, wo next even number generate nahi karta.

#### **Summary:**
- **`yield` ka purpose**: `yield` ko use karna ek generator function banata hai, jo ek value ko **step by step** return karta hai jab tak usse request na ki jaaye. Isse **memory consumption kam hota hai** aur data ko lazily process kiya jaata hai.
- **Usage**: `yield` ka use tab hota hai jab aapko **large datasets** ko efficiently process karna ho, ya jab aapko step-by-step output chahiye ho bina puri dataset ko memory mein load kiye.
- **Differences between `yield` and `return`**: `return` function ko terminate kar deta hai, jabki `yield` function ko temporarily suspend kar deta hai aur ek value return karne ke baad function ko dobara call kiya jaa sakta hai.

Is tarah se, aap `yield` ko samajh kar apne Python code mein efficiently use kar sakte hain!


### **Q2. What will be the output of the following Python code?**

```python
x = [1, 2, 3]
y = x
y[0] = 10
print(x)
```

**Sawal Ka Matlab:**  
Yeh sawal aap se yeh puchta hai ke jab aap ek list (`x`) ko doosri variable (`y`) ko assign karte hain aur fir `y[0]` ko modify karte hain, to `x` list ka kya hoga?

**Answer Explanation:**  
**Correct Answer:** **D) [10, 2, 3]**

- Jab aap `y = x` karte hain, to `y` aur `x` dono **same memory location** ko reference karte hain. Matlab, agar aap `y[0] = 10` karte hain, to `x` ki bhi pehli value `10` ho jaayegi.
  
- **Python Lists are mutable**: Jab aap list ko ek variable se doosre variable mein assign karte hain, to dono variables ek hi object ko refer karte hain (shallow copy). Isliye `y[0] = 10` karne se `x` ki value bhi update ho jaati hai.

**Code Explanation:**
```python
x = [1, 2, 3]   # List x is created
y = x            # Now y and x point to the same list in memory
y[0] = 10         # Modify the first element of the list y (which also affects x)
print(x)          # x is printed, which will show the modified list
```

**Output:**
```
[10, 2, 3]
```

---

### **Q3. What is the error in the following code?**

```python
def calculate_area(radius):
    return 3.14 * radius * radius

radius = input("Enter radius: ")
area = calculate_area(radius)
print("Area:", area)
```

**Sawal Ka Matlab:**  
Is sawal mein aap se pucha jaa raha hai ke yeh code execute hone par koi error aaye ga ya nahi, aur agar aaye ga to woh kis wajah se hai.

**Answer Explanation:**  
**Correct Answer:** **B) TypeError**

- **Problem:** `input()` function se jo value aati hai, wo **string** hoti hai. Agar aap `radius = input("Enter radius: ")` likhte hain, to `radius` variable ek string ho jata hai. Phir jab aap `calculate_area(radius)` call karte hain, to `radius` ko multiply karne ki koshish hoti hai jo ek string aur integer ke beech type mismatch hai, isliye `TypeError` aata hai.

- **Fix:** Aapko `radius` ko `int()` mein convert karna padega taake wo integer mein convert ho jaaye aur multiplication ho sake.

**Code Fix:**
```python
def calculate_area(radius):
    return 3.14 * radius * radius

radius = int(input("Enter radius: "))   # Convert input to integer
area = calculate_area(radius)
print("Area:", area)
```

**Explanation:**
- **TypeError:** String aur integer ko directly multiply nahi kiya jaa sakta. Isliye aapko `radius` ko `int` mein convert karna padega.

---

### **Q4. What is the purpose of the `pass` keyword in Python?**

**Sawal Ka Matlab:**  
Aap se yeh pucha jaa raha hai ke Python mein `pass` ka kya purpose hota hai.

**Answer Explanation:**  
**Correct Answer:** **C) It is used as a placeholder for future code.**

- `pass` ek placeholder ke roop mein use hota hai jab aapko kisi block of code ko temporarily skip karna ho ya placeholder banana ho, jaise ki function ya loop mein.

- **Use Case:**
  - Jab aap code likh rahe hote hain aur koi functionality complete nahi kar paate, to aap `pass` daal dete hain taake program run ho sake bina kisi error ke.
  
**Example:**
```python
def my_function():
    pass  # No code yet, but function is still defined

for i in range(5):
    if i == 3:
        pass  # Skip when i is 3
    else:
        print(i)
```

**Explanation:**
- `pass` ko use karte waqt koi bhi operation nahi hota, bas execution ko continue karne ka ek tarika hota hai jab aap kisi block ko temporarily empty rakhna chahte hain.

---

### **Q5. What is the difference between `deepcopy()` and `copy()` in Python?**

**Sawal Ka Matlab:**  
Is sawal mein aap se yeh pucha gaya hai ke `copy()` aur `deepcopy()` functions mein kya farq hota hai.

**Answer Explanation:**  
**Correct Answer:** **B) `copy()` creates a shallow copy, while `deepcopy()` creates a deep copy of the object.**

- **Shallow Copy (copy()):** Jab aap `copy()` function ka use karte hain, to wo original object ka ek new reference banata hai, lekin agar object ke andar koi mutable objects hain (like lists), to wo unko copy nahi karta, balki unka reference copy karta hai. 

- **Deep Copy (deepcopy()):** Jab aap `deepcopy()` ka use karte hain, to poora object, including nested objects, completely copy ho jaata hai, matlab nested objects ka bhi naya copy ban jaata hai.

**Code Example:**

```python
import copy

original = [[1, 2, 3], [4, 5, 6]]
shallow = copy.copy(original)  # Shallow copy
deep = copy.deepcopy(original)  # Deep copy

original[0][0] = 10

print("Original:", original)
print("Shallow Copy:", shallow)
print("Deep Copy:", deep)
```

**Explanation:**
- **Shallow Copy:** Jab aap `shallow` copy karte hain, to inner list ka reference copy hota hai, isliye `original[0][0] = 10` ka effect `shallow` copy par bhi hota hai.
- **Deep Copy:** `deepcopy()` se poora object copy hota hai, isliye `deep` copy par koi effect nahi hota.

---

### **Q6. What will be the output of the following Python code?**

```python
def greet(name="John"):
    print("Hello", name)

greet("Alice")
greet()
```

**Sawal Ka Matlab:**  
Yeh sawal aap se yeh puchta hai ke jab ek function ko default parameter diya gaya ho, aur aap us function ko arguments ke saath aur bina arguments ke call karte hain, to output kya hoga?

**Answer Explanation:**  
**Correct Answer:**  
```
Hello Alice
Hello John
```

- **First Call (`greet("Alice")`)**: Jab aap `greet` ko `"Alice"` ke saath call karte hain, to `"Alice"` ko function ke `name` parameter ke roop mein pass kiya jaata hai aur `"Hello Alice"` print hota hai.
- **Second Call (`greet()`)**: Jab aap function ko bina kisi argument ke call karte hain, to default value `"John"` use hoti hai aur `"Hello John"` print hota hai.

---

### **Q7. Which of the following is the correct syntax for defining a class in Python?**

**Sawal Ka Matlab:**  
Aap se yeh puchha jaa raha hai ke Python mein class ko define karne ka correct syntax kya hota hai.

**Answer Explanation:**  
**Correct Answer:** **B) class MyClass:**

- **Class Definition:** Python mein class ko define karte waqt `class` keyword ka use hota hai. Aur class ka naam conventionally capital letter se start hota hai (PascalCase).

**Example:**
```python
class MyClass:
    def __init__(self, name):
        self.name = name
    
    def greet(self):
        print(f"Hello, {self.name}!")
```

- Yeh ek simple class hai jo `name` attribute ko store karta hai aur `greet()` method ko use karke uska greeting print karta hai.

---

### **Q8. What is the purpose of the `__init__()` method in a Python class?**

**Sawal Ka Matlab:**  
Is sawal mein aap se yeh puchha gaya hai ke `__init__()` method ka kya purpose hai jab aap Python class mein define karte hain.

**Answer Explanation:**  
**Correct Answer:** **C) It initializes the object of the class.**

- `__init__()` method Python class mein ek special method hota hai jo class ka object banate waqt automatically call hota hai. Yeh method object ke attributes ko initialize karne ke liye use hota hai.

**Code Example:**
```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person1 = Person("Alice", 30)
print(person

1.name, person1.age)
```

**Explanation:**
- Jab `Person` class ka object `person1` create hota hai, to `__init__()` method automatically call hota hai aur `name` aur `age` attributes initialize kar diye jaate hain.


### **Q9. What is the output of the following Python code?**

```python
x = "Python"
y = "Python"
z = x
x = "Java"

print(x)
print(y)
print(z)
```

**Sawal Ka Matlab:**  
Is sawal mein aap se yeh pucha jaa raha hai ke jab aap string ko modify karte hain, to do strings jo pehle ek hi value ko refer kar rahi hoti hain, unka behavior kaise change hota hai.

**Answer Explanation:**  
**Correct Answer:**  
```
Java
Python
Python
```

- Jab aap `x = "Python"` aur `y = "Python"` likhte hain, to Python memory mein `Python` string ko refer karta hai. Phir jab aap `x = "Java"` likhte hain, to `x` ka reference `Java` string ko point karne lagta hai, lekin `y` aur `z` ab bhi `Python` ko refer karte hain.
  
- **Strings are immutable** in Python, iska matlab hai ki aap string ki value directly change nahi kar sakte. Jab aap `x = "Java"` likhte hain, to ek naya string object create hota hai aur `x` usse reference karta hai, lekin `y` aur `z` abhi bhi purani `Python` string ko reference kar rahe hote hain.

**Output:**
```
Java
Python
Python
```

---

### **Q10. Which of the following are mutable data types in Python?**

- A) list
- B) tuple
- C) dictionary
- D) string

**Sawal Ka Matlab:**  
Aap se pucha jaa raha hai ke kaunse data types Python mein mutable hain, matlab unmein data ko modify kar sakte hain, aur kaunse immutable hain, jahan data ko change nahi kiya jaa sakta.

**Answer Explanation:**  
**Correct Answer:** **A) list, C) dictionary**

- **Mutable Data Types:** Python mein jo data types aap modify kar sakte hain unhein **mutable** kaha jaata hai. Jaise:
  - **List:** Lists ko modify kiya jaa sakta hai, unmein elements ko add, remove, ya update kiya jaa sakta hai.
  - **Dictionary:** Dictionaries bhi mutable hain. Aap unmein keys aur values ko add, remove, ya modify kar sakte hain.

- **Immutable Data Types:** Jaise:
  - **Tuple:** Tuples immutable hain, isliye unmein aap elements modify nahi kar sakte.
  - **String:** Strings bhi immutable hain, unhe modify nahi kiya jaa sakta.

---

### **Q11. What is the purpose of the `finally` block in Python exception handling?**

**Sawal Ka Matlab:**  
Is sawal mein aap se pucha jaa raha hai ke `finally` block ka kya role hai jab exception handling ki baat hoti hai.

**Answer Explanation:**  
**Correct Answer:** **D) It is used to execute code that must run, regardless of whether an exception occurs or not.**

- **`finally` Block:** Python mein exception handling mein `try` aur `except` blocks ke alawa ek `finally` block bhi hota hai. `finally` block ka purpose yeh hai ke agar aapne koi code likha hai jo **har condition mein run hona chahiye**, chahe exception aaye ya na aaye, to wo code `finally` block mein daalna chahiye.

- Agar koi exception raise hota hai aur wo handle ho jaata hai ya agar koi exception nahi hota, `finally` block ka code **har case mein execute hota hai**.

**Code Example:**
```python
try:
    x = 5 / 0
except ZeroDivisionError:
    print("Cannot divide by zero")
finally:
    print("This will always be executed.")
```

**Explanation:**
- Pehle `ZeroDivisionError` raise hota hai, lekin exception handle ho jaata hai `except` block ke through. Uske baad, **`finally` block ka code** `"This will always be executed."` print karega, chahe exception ho ya na ho.

**Output:**
```
Cannot divide by zero
This will always be executed.
```

---

### **Q12. What is the difference between `is` and `==` in Python?**

**Sawal Ka Matlab:**  
Is sawal mein aap se yeh pucha gaya hai ke Python mein `is` aur `==` ka kya farq hai.

**Answer Explanation:**  
**Correct Answer:**  
- **`==`:** `==` operator ka use value comparison ke liye hota hai. Iska matlab hai ki aap do objects ki values ko compare karte hain, agar unki values same hain, to wo `True` return karega.
- **`is`:** `is` operator ka use object identity ko compare karne ke liye hota hai. Matlab, yeh check karta hai ke kya do variables ek hi object ko reference kar rahe hain (same memory location), chahe unki values same ho ya na ho.

**Code Example:**
```python
x = [1, 2, 3]
y = [1, 2, 3]
z = x

print(x == y)  # True, because values are the same
print(x is y)  # False, because they refer to different objects in memory
print(x is z)  # True, because x and z refer to the same object
```

**Explanation:**
- `x == y` `True` hai, kyunki dono lists ki values same hain.
- `x is y` `False` hai, kyunki `x` aur `y` alag objects hain, even though unki values same hain.
- `x is z` `True` hai, kyunki `x` aur `z` same object ko reference kar rahe hain (yani same memory location).

---

### Summary:

Here's a recap of the key concepts from these questions:
1. **Memory references** (`is` vs `==`).
2. **Exception handling** (`finally` block ensures code runs irrespective of exceptions).
3. **Mutable and immutable data types** (like `list`, `tuple`, `dict`, `str`).
4. **Shallow vs Deep copy** (`copy()` vs `deepcopy()`).
5. **String manipulation** (how Python handles strings and memory references).
6. **Generators** and how `yield` works for efficient memory usage.

(Notes By Nida Rizwan)

